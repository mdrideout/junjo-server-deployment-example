# === Junjo Server Environment Vars =============================================================>
# Junjo Server's Running Environment:
# Value: development || production
# Implications for authentication and service linkage
# - Development: uses localhost and ports for services
# - Production: uses a production hostname and subdomains for services
JUNJO_ENV="development"

# Production Authentication Domain:
# Used When: JUNJO_ENV="production"
# 
# Set this to your production top level (root) domain
# that will be used for session cookie authentication.
# This will automatically cover all subdomains.
# 
# Example:
# JUNJO_PROD_AUTH_DOMAIN="example.com"
# COVERS:
#   - example.com
#   - www.example.com
#   - api.example.com
JUNJO_PROD_AUTH_DOMAIN="example.com"

# === Backend Vars =============================================================>
# Session Secret:
# This is for session authentication management
# You can generate a secure key in your terminal with: openssl rand -base64 48
JUNJO_SESSION_SECRET="your_secret_key"

# Allowed Origins:
# A comma-separated list of allowed origins for CORS.
# If not set, all origins are allowed (*)
# Recommend: setting to your domains prevents other domains from attempting to send requests
# Example: JUNJO_ALLOW_ORIGINS=http://localhost:5151,http://localhost:5153,https://example.com,https://www.example.com
JUNJO_ALLOW_ORIGINS=http://localhost:5151,http://localhost:5153

# === App Vars ===================================================================================>
# Junjo Server API key:
# This is used by Junjo Server to authenticate received telemetry payloads
# from the application, via JunjoServerOtelExporter.
# You can create an API key in the Junjo Server frontend UI.
JUNJO_SERVER_API_KEY="your_api_key"

# === Caddy + Cloudflare DNS Vars ================================================================>
# This example uses Caddy as a reverse proxy, and Cloudflare as the DNS provider.
# The caddy/Dockerfile creates an xcaddy custom build with github.com/caddy-dns/cloudflare
#   - This plugin handles automated DNS challenge for Let's Encrypt certificates.
#   - This is not required for local development, but is required for production.
#
# These environment variables are used by Caddy to configure the Cloudflare plugin.
# If you are following this example and want to use Caddy's automatic SSL with a 
# different DNS provider, you will need to configure Caddy accordingly.
#   - https://github.com/caddyserver/xcaddy
#   - https://caddyserver.com/docs/quick-starts/https
# 
# This variable is created inside CloudFlare. See https://github.com/caddy-dns/cloudflare 
CF_API_TOKEN="your_api_token"

# === FOR SSL TESTING ============================================================================>
# Uncomment JUNJO_LETS_ENCRYPT_STAGING_CA_DIRECTIVE to use the Let's Encrypt staging environment.
# This lets you avoid production rate limits while you are testing or debugging your setup.
#
# See this repository's README.md for instructions on downloading and trusting
# the staging certificates on a MacOS system.
#
# Keep this line commented for production.
# JUNJO_LETS_ENCRYPT_STAGING_CA_DIRECTIVE="ca https://acme-staging-v02.api.letsencrypt.org/directory"